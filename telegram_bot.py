import telebot
from telebot import types
import json
from datetime import datetime

# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = "YOUR_BOT_TOKEN"
# URL –≤–∞—à–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∑–∞–ø–∏—Å–∏
BOOKING_URL = "https://yourdomain.com/booking.html"
# ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞—è–≤–æ–∫ (—Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª)
BOOKINGS_CHANNEL = "@your_bookings_channel"
# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_ID = "YOUR_ADMIN_ID"

bot = telebot.TeleBot(BOT_TOKEN)

@bot.message_handler(commands=['start'])
def start_message(message):
    markup = types.InlineKeyboardMarkup()
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É Web App –¥–ª—è –∑–∞–ø–∏—Å–∏
    web_app = types.WebAppInfo(url=BOOKING_URL)
    booking_btn = types.InlineKeyboardButton(
        text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–ª–∏–Ω–∏–Ω–≥", 
        web_app=web_app
    )
    markup.add(booking_btn)
    
    bot.send_message(
        message.chat.id,
        "üßπ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–ª–∏–Ω–∏–Ω–≥–æ–≤—É—é –∫–æ–º–ø–∞–Ω–∏—é!\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥–∏ –∫–ª–∏–Ω–∏–Ω–≥–∞.\n"
        "–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.",
        reply_markup=markup
    )

@bot.message_handler(content_types=['web_app_data'])
def handle_booking_data(message):
    data = json.loads(message.web_app_data.data)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –∑–∞—è–≤–∫–∏
    booking_id = f"B{datetime.now().strftime('%Y%m%d%H%M%S')}"
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞ (–±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö)
    channel_message = f"""
üÜî #{booking_id}
üë§ {data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üìû {data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üìÖ {data.get('date', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')} {data.get('time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
üßπ {data.get('service', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}
üìê {data.get('area', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')} –º¬≤
üìç {data.get('address', '–ù–µ —É–∫–∞–∑–∞–Ω')}
üìù {data.get('notes', '–ù–µ—Ç')}
‚è∞ {datetime.now().strftime('%d.%m.%Y %H:%M')}
üîÑ –ù–æ–≤–∞—è
"""
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–∞–Ω–∞–ª
    try:
        bot.send_message(BOOKINGS_CHANNEL, channel_message)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª: {e}")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
    bot.send_message(
        message.chat.id,
        f"‚úÖ –ó–∞—è–≤–∫–∞ #{booking_id} –ø—Ä–∏–Ω—è—Ç–∞!\n"
        "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
    )

@bot.message_handler(commands=['admin'])
def admin_panel(message):
    if str(message.from_user.id) != ADMIN_ID:
        return
    
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("üìã –í—Å–µ –∑–∞—è–≤–∫–∏", callback_data="view_all"))
    markup.add(types.InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –ø–æ –¥–∞—Ç–µ", callback_data="search_date"))
    markup.add(types.InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats"))
    
    bot.send_message(
        message.chat.id,
        "üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: True)
def handle_admin_callbacks(call):
    if str(call.from_user.id) != ADMIN_ID:
        return
    
    if call.data == "view_all":
        bot.send_message(
            call.message.chat.id,
            "üìã –í—Å–µ –∑–∞—è–≤–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫–∞–Ω–∞–ª–µ:\n" + BOOKINGS_CHANNEL
        )
    elif call.data == "search_date":
        bot.send_message(
            call.message.chat.id,
            "üîç –î–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –¥–∞—Ç–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫ –≤ –∫–∞–Ω–∞–ª–µ:\n" + BOOKINGS_CHANNEL
        )
    elif call.data == "stats":
        bot.send_message(
            call.message.chat.id,
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–∞–Ω–∞–ª–∞:\n" + BOOKINGS_CHANNEL
        )

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞—è–≤–∫–∞–º–∏
@bot.message_handler(commands=['update_status'])
def update_booking_status(message):
    if str(message.from_user.id) != ADMIN_ID:
        return
    
    # –§–æ—Ä–º–∞—Ç: /update_status B20241201120000 –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
    try:
        parts = message.text.split(' ', 2)
        booking_id = parts[1]
        new_status = parts[2]
        
        bot.send_message(
            message.chat.id,
            f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ #{booking_id} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: {new_status}\n\n"
            f"–û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –≤ –∫–∞–Ω–∞–ª–µ {BOOKINGS_CHANNEL} –≤—Ä—É—á–Ω—É—é."
        )
    except:
        bot.send_message(
            message.chat.id,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
            "/update_status B20241201120000 –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"
        )

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)